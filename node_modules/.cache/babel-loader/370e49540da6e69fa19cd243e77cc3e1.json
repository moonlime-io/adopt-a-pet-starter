{"ast":null,"code":"import _classCallCheck from \"/Users/io/Dev/adopt-a-pet-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/io/Dev/adopt-a-pet-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/io/Dev/adopt-a-pet-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/io/Dev/adopt-a-pet-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { R as RequestHandler, e as getUrlByMask, m as matchRequestUrl, g as getPublicUrlFromRequest, f as prepareRequest, h as prepareResponse, i as getTimestamp, j as getStatusCodeColor } from './RequestHandler-deps.js';\nimport { b as set, s as status, e as json, d as delay, f as fetch } from './fetch-deps.js';\nimport { c as cookie, b as body, t as text, x as xml } from './xml-deps.js';\n\n/**\r\n * Performs a case-insensitive comparison of two given strings.\r\n */\nfunction isStringEqual(actual, expected) {\n  return actual.toLowerCase() === expected.toLowerCase();\n}\nvar RESTMethods;\n(function (RESTMethods) {\n  RESTMethods[\"HEAD\"] = \"HEAD\";\n  RESTMethods[\"GET\"] = \"GET\";\n  RESTMethods[\"POST\"] = \"POST\";\n  RESTMethods[\"PUT\"] = \"PUT\";\n  RESTMethods[\"PATCH\"] = \"PATCH\";\n  RESTMethods[\"OPTIONS\"] = \"OPTIONS\";\n  RESTMethods[\"DELETE\"] = \"DELETE\";\n})(RESTMethods || (RESTMethods = {}));\nvar restContext = {\n  set: set,\n  status: status,\n  cookie: cookie,\n  body: body,\n  text: text,\n  json: json,\n  xml: xml,\n  delay: delay,\n  fetch: fetch\n};\n/**\r\n * Request handler for REST API requests.\r\n * Provides request matching based on method and URL.\r\n */\nvar RestHandler = /*#__PURE__*/function (_RequestHandler) {\n  _inherits(RestHandler, _RequestHandler);\n  var _super = _createSuper(RestHandler);\n  function RestHandler(method, mask, resolver) {\n    var _this;\n    _classCallCheck(this, RestHandler);\n    _this = _super.call(this, {\n      info: {\n        header: \"\".concat(method, \" \").concat(mask),\n        mask: mask,\n        method: method\n      },\n      ctx: restContext,\n      resolver: resolver\n    });\n    _this.checkRedundantQueryParameters();\n    return _this;\n  }\n  _createClass(RestHandler, [{\n    key: \"checkRedundantQueryParameters\",\n    value: function checkRedundantQueryParameters() {\n      var _this$info = this.info,\n        method = _this$info.method,\n        mask = _this$info.mask;\n      var resolvedMask = getUrlByMask(mask);\n      if (resolvedMask instanceof URL && resolvedMask.search !== '') {\n        var queryParams = [];\n        resolvedMask.searchParams.forEach(function (_, paramName) {\n          queryParams.push(paramName);\n        });\n        console.warn(\"[MSW] Found a redundant usage of query parameters in the request handler URL for \\\"\".concat(method, \" \").concat(mask, \"\\\". Please match against a path instead, and access query parameters in the response resolver function:\\n\\nrest.\").concat(method.toLowerCase(), \"(\\\"\").concat(resolvedMask.pathname, \"\\\", (req, res, ctx) => {\\n  const query = req.url.searchParams\\n\").concat(queryParams.map(function (paramName) {\n          return \"  const \".concat(paramName, \" = query.get(\\\"\").concat(paramName, \"\\\")\");\n        }).join('\\n'), \"\\n})      \"));\n      }\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(request) {\n      return matchRequestUrl(request.url, this.info.mask);\n    }\n  }, {\n    key: \"getPublicRequest\",\n    value: function getPublicRequest(request, parsedResult) {\n      return Object.assign(Object.assign({}, request), {\n        params: parsedResult.params || {}\n      });\n    }\n  }, {\n    key: \"predicate\",\n    value: function predicate(request, parsedResult) {\n      return isStringEqual(this.info.method, request.method) && parsedResult.matches;\n    }\n  }, {\n    key: \"log\",\n    value: function log(request, response) {\n      var publicUrl = getPublicUrlFromRequest(request);\n      var loggedRequest = prepareRequest(request);\n      var loggedResponse = prepareResponse(response);\n      console.groupCollapsed('[MSW] %s %s %s (%c%s%c)', getTimestamp(), request.method, publicUrl, \"color:\".concat(getStatusCodeColor(response.status)), response.status, 'color:inherit');\n      console.log('Request', loggedRequest);\n      console.log('Handler:', {\n        mask: this.info.mask,\n        resolver: this.resolver\n      });\n      console.log('Response', loggedResponse);\n      console.groupEnd();\n    }\n  }]);\n  return RestHandler;\n}(RequestHandler);\nfunction createRestHandler(method) {\n  return function (mask, resolver) {\n    return new RestHandler(method, mask, resolver);\n  };\n}\nvar rest = {\n  head: createRestHandler(RESTMethods.HEAD),\n  get: createRestHandler(RESTMethods.GET),\n  post: createRestHandler(RESTMethods.POST),\n  put: createRestHandler(RESTMethods.PUT),\n  delete: createRestHandler(RESTMethods.DELETE),\n  patch: createRestHandler(RESTMethods.PATCH),\n  options: createRestHandler(RESTMethods.OPTIONS)\n};\nexport { RestHandler as R, RESTMethods as a, restContext as b, isStringEqual as i, rest as r };","map":{"version":3,"names":["R","RequestHandler","e","getUrlByMask","m","matchRequestUrl","g","getPublicUrlFromRequest","f","prepareRequest","h","prepareResponse","i","getTimestamp","j","getStatusCodeColor","b","set","s","status","json","d","delay","fetch","c","cookie","body","t","text","x","xml","isStringEqual","actual","expected","toLowerCase","RESTMethods","restContext","RestHandler","method","mask","resolver","info","header","ctx","checkRedundantQueryParameters","resolvedMask","URL","search","queryParams","searchParams","forEach","_","paramName","push","console","warn","pathname","map","join","request","url","parsedResult","Object","assign","params","matches","response","publicUrl","loggedRequest","loggedResponse","groupCollapsed","log","groupEnd","createRestHandler","rest","head","HEAD","get","GET","post","POST","put","PUT","delete","DELETE","patch","PATCH","options","OPTIONS","a","r"],"sources":["/Users/io/Dev/adopt-a-pet-starter/node_modules/msw/lib/esm/rest-deps.js"],"sourcesContent":["import { R as RequestHandler, e as getUrlByMask, m as matchRequestUrl, g as getPublicUrlFromRequest, f as prepareRequest, h as prepareResponse, i as getTimestamp, j as getStatusCodeColor } from './RequestHandler-deps.js';\nimport { b as set, s as status, e as json, d as delay, f as fetch } from './fetch-deps.js';\nimport { c as cookie, b as body, t as text, x as xml } from './xml-deps.js';\n\n/**\r\n * Performs a case-insensitive comparison of two given strings.\r\n */\r\nfunction isStringEqual(actual, expected) {\r\n    return actual.toLowerCase() === expected.toLowerCase();\r\n}\n\nvar RESTMethods;\r\n(function (RESTMethods) {\r\n    RESTMethods[\"HEAD\"] = \"HEAD\";\r\n    RESTMethods[\"GET\"] = \"GET\";\r\n    RESTMethods[\"POST\"] = \"POST\";\r\n    RESTMethods[\"PUT\"] = \"PUT\";\r\n    RESTMethods[\"PATCH\"] = \"PATCH\";\r\n    RESTMethods[\"OPTIONS\"] = \"OPTIONS\";\r\n    RESTMethods[\"DELETE\"] = \"DELETE\";\r\n})(RESTMethods || (RESTMethods = {}));\r\nconst restContext = {\r\n    set,\r\n    status,\r\n    cookie,\r\n    body,\r\n    text,\r\n    json,\r\n    xml,\r\n    delay,\r\n    fetch,\r\n};\r\n/**\r\n * Request handler for REST API requests.\r\n * Provides request matching based on method and URL.\r\n */\r\nclass RestHandler extends RequestHandler {\r\n    constructor(method, mask, resolver) {\r\n        super({\r\n            info: {\r\n                header: `${method} ${mask}`,\r\n                mask,\r\n                method,\r\n            },\r\n            ctx: restContext,\r\n            resolver,\r\n        });\r\n        this.checkRedundantQueryParameters();\r\n    }\r\n    checkRedundantQueryParameters() {\r\n        const { method, mask } = this.info;\r\n        const resolvedMask = getUrlByMask(mask);\r\n        if (resolvedMask instanceof URL && resolvedMask.search !== '') {\r\n            const queryParams = [];\r\n            resolvedMask.searchParams.forEach((_, paramName) => {\r\n                queryParams.push(paramName);\r\n            });\r\n            console.warn(`\\\n[MSW] Found a redundant usage of query parameters in the request handler URL for \"${method} ${mask}\". Please match against a path instead, and access query parameters in the response resolver function:\n\nrest.${method.toLowerCase()}(\"${resolvedMask.pathname}\", (req, res, ctx) => {\n  const query = req.url.searchParams\n${queryParams\r\n                .map((paramName) => `\\\n  const ${paramName} = query.get(\"${paramName}\")`)\r\n                .join('\\n')}\n})\\\n      `);\r\n        }\r\n    }\r\n    parse(request) {\r\n        return matchRequestUrl(request.url, this.info.mask);\r\n    }\r\n    getPublicRequest(request, parsedResult) {\r\n        return Object.assign(Object.assign({}, request), { params: parsedResult.params || {} });\r\n    }\r\n    predicate(request, parsedResult) {\r\n        return (isStringEqual(this.info.method, request.method) && parsedResult.matches);\r\n    }\r\n    log(request, response) {\r\n        const publicUrl = getPublicUrlFromRequest(request);\r\n        const loggedRequest = prepareRequest(request);\r\n        const loggedResponse = prepareResponse(response);\r\n        console.groupCollapsed('[MSW] %s %s %s (%c%s%c)', getTimestamp(), request.method, publicUrl, `color:${getStatusCodeColor(response.status)}`, response.status, 'color:inherit');\r\n        console.log('Request', loggedRequest);\r\n        console.log('Handler:', {\r\n            mask: this.info.mask,\r\n            resolver: this.resolver,\r\n        });\r\n        console.log('Response', loggedResponse);\r\n        console.groupEnd();\r\n    }\r\n}\n\nfunction createRestHandler(method) {\r\n    return (mask, resolver) => {\r\n        return new RestHandler(method, mask, resolver);\r\n    };\r\n}\r\nconst rest = {\r\n    head: createRestHandler(RESTMethods.HEAD),\r\n    get: createRestHandler(RESTMethods.GET),\r\n    post: createRestHandler(RESTMethods.POST),\r\n    put: createRestHandler(RESTMethods.PUT),\r\n    delete: createRestHandler(RESTMethods.DELETE),\r\n    patch: createRestHandler(RESTMethods.PATCH),\r\n    options: createRestHandler(RESTMethods.OPTIONS),\r\n};\n\nexport { RestHandler as R, RESTMethods as a, restContext as b, isStringEqual as i, rest as r };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}